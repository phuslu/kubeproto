package v1

import (
	"fmt"
	"time"

	"github.com/VictoriaMetrics/easyproto"
)

// ObjectMeta is metadata that all persisted resources must have, which includes all objects
// users must create.
type ObjectMeta struct {
	// Name must be unique within a namespace. Is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	// Cannot be updated.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
	// +optional
	Name string `json:"name,omitempty" protobuf:"bytes,1,opt,name=name"`

	// GenerateName is an optional prefix, used by the server, to generate a unique
	// name ONLY IF the Name field has not been provided.
	// If this field is used, the name returned to the client will be different
	// than the name passed. This value will also be combined with a unique suffix.
	// The provided value has the same validation rules as the Name field,
	// and may be truncated by the length of the suffix required to make the value
	// unique on the server.
	//
	// If this field is specified and the generated name exists, the server will return a 409.
	//
	// Applied only if Name is not specified.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	// +optional
	GenerateName string `json:"generateName,omitempty" protobuf:"bytes,2,opt,name=generateName"`

	// Namespace defines the space within which each name must be unique. An empty namespace is
	// equivalent to the "default" namespace, but "default" is the canonical representation.
	// Not all objects are required to be scoped to a namespace - the value of this field for
	// those objects will be empty.
	//
	// Must be a DNS_LABEL.
	// Cannot be updated.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
	// +optional
	Namespace string `json:"namespace,omitempty" protobuf:"bytes,3,opt,name=namespace"`

	// Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
	// +optional
	SelfLink string `json:"selfLink,omitempty" protobuf:"bytes,4,opt,name=selfLink"`

	// UID is the unique in time and space value for this object. It is typically generated by
	// the server on successful creation of a resource and is not allowed to change on PUT
	// operations.
	//
	// Populated by the system.
	// Read-only.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
	// +optional
	UID string `json:"uid,omitempty" protobuf:"bytes,5,opt,name=uid,casttype=k8s.io/kubernetes/pkg/types.UID"`

	// An opaque value that represents the internal version of this object that can
	// be used by clients to determine when objects have changed. May be used for optimistic
	// concurrency, change detection, and the watch operation on a resource or set of resources.
	// Clients must treat these values as opaque and passed unmodified back to the server.
	// They may only be valid for a particular resource or set of resources.
	//
	// Populated by the system.
	// Read-only.
	// Value must be treated as opaque by clients and .
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
	// +optional
	ResourceVersion string `json:"resourceVersion,omitempty" protobuf:"bytes,6,opt,name=resourceVersion"`

	// A sequence number representing a specific generation of the desired state.
	// Populated by the system. Read-only.
	// +optional
	Generation int64 `json:"generation,omitempty" protobuf:"varint,7,opt,name=generation"`

	// CreationTimestamp is a timestamp representing the server time when this object was
	// created. It is not guaranteed to be set in happens-before order across separate operations.
	// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
	//
	// Populated by the system.
	// Read-only.
	// Null for lists.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	CreationTimestamp Time `json:"creationTimestamp,omitempty" protobuf:"bytes,8,opt,name=creationTimestamp"`

	// DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This
	// field is set by the server when a graceful deletion is requested by the user, and is not
	// directly settable by a client. The resource is expected to be deleted (no longer visible
	// from resource lists, and not reachable by name) after the time in this field, once the
	// finalizers list is empty. As long as the finalizers list contains items, deletion is blocked.
	// Once the deletionTimestamp is set, this value may not be unset or be set further into the
	// future, although it may be shortened or the resource may be deleted prior to this time.
	// For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react
	// by sending a graceful termination signal to the containers in the pod. After that 30 seconds,
	// the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup,
	// remove the pod from the API. In the presence of network partitions, this object may still
	// exist after this timestamp, until an administrator or automated process can determine the
	// resource is fully terminated.
	// If not set, graceful deletion of the object has not been requested.
	//
	// Populated by the system when a graceful deletion is requested.
	// Read-only.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	// +optional
	DeletionTimestamp *Time `json:"deletionTimestamp,omitempty" protobuf:"bytes,9,opt,name=deletionTimestamp"`

	// Number of seconds allowed for this object to gracefully terminate before
	// it will be removed from the system. Only set when deletionTimestamp is also set.
	// May only be shortened.
	// Read-only.
	// +optional
	DeletionGracePeriodSeconds *int64 `json:"deletionGracePeriodSeconds,omitempty" protobuf:"varint,10,opt,name=deletionGracePeriodSeconds"`

	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
	// +optional
	Labels map[string]string `json:"labels,omitempty" protobuf:"bytes,11,rep,name=labels"`

	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
	// +optional
	Annotations map[string]string `json:"annotations,omitempty" protobuf:"bytes,12,rep,name=annotations"`

	// List of objects depended by this object. If ALL objects in the list have
	// been deleted, this object will be garbage collected. If this object is managed by a controller,
	// then an entry in this list will point to this controller, with the controller field set to true.
	// There cannot be more than one managing controller.
	// +optional
	// +patchMergeKey=uid
	// +patchStrategy=merge
	OwnerReferences []OwnerReference `json:"ownerReferences,omitempty" patchStrategy:"merge" patchMergeKey:"uid" protobuf:"bytes,13,rep,name=ownerReferences"`

	// Must be empty before the object is deleted from the registry. Each entry
	// is an identifier for the responsible component that will remove the entry
	// from the list. If the deletionTimestamp of the object is non-nil, entries
	// in this list can only be removed.
	// Finalizers may be processed and removed in any order.  Order is NOT enforced
	// because it introduces significant risk of stuck finalizers.
	// finalizers is a shared field, any actor with permission can reorder it.
	// If the finalizer list is processed in order, then this can lead to a situation
	// in which the component responsible for the first finalizer in the list is
	// waiting for a signal (field value, external system, or other) produced by a
	// component responsible for a finalizer later in the list, resulting in a deadlock.
	// Without enforced ordering finalizers are free to order amongst themselves and
	// are not vulnerable to ordering changes in the list.
	// +optional
	// +patchStrategy=merge
	Finalizers []string `json:"finalizers,omitempty" patchStrategy:"merge" protobuf:"bytes,14,rep,name=finalizers"`

	// ManagedFields maps workflow-id and version to the set of fields
	// that are managed by that workflow. This is mostly for internal
	// housekeeping, and users typically shouldn't need to set or
	// understand this field. A workflow can be the user's name, a
	// controller's name, or the name of a specific apply path like
	// "ci-cd". The set of fields is always in the version that the
	// workflow used when modifying the object.
	//
	// +optional
	ManagedFields []ManagedFieldsEntry `json:"managedFields,omitempty" protobuf:"bytes,17,rep,name=managedFields"`
}

// UnmarshalProtobuf unmarshals om from protobuf message at src.
func (om *ObjectMeta) UnmarshalProtobuf(src []byte) (err error) {
	// Set default ObjectMeta values
	om.Name = ""
	om.GenerateName = ""
	om.Namespace = ""
	om.SelfLink = ""
	om.UID = ""
	om.ResourceVersion = ""
	om.Generation = 0
	om.CreationTimestamp = Time{}
	om.DeletionTimestamp = nil
	om.DeletionGracePeriodSeconds = nil
	om.Labels = nil
	om.Annotations = nil
	om.OwnerReferences = nil
	om.Finalizers = nil
	om.ManagedFields = nil

	// Parse ObjectMeta message at src
	var fc easyproto.FieldContext
	var ok bool
	for len(src) > 0 {
		src, err = fc.NextField(src)
		if err != nil {
			return fmt.Errorf("cannot read next field in ObjectMeta message")
		}
		switch fc.FieldNum {
		case 1:
			om.Name, ok = fc.String()
			if !ok {
				return fmt.Errorf("cannot read ObjectMeta name")
			}
		case 2:
			om.GenerateName, ok = fc.String()
			if !ok {
				return fmt.Errorf("cannot read ObjectMeta name")
			}
		case 3:
			om.Namespace, ok = fc.String()
			if !ok {
				return fmt.Errorf("cannot read ObjectMeta name")
			}
		case 4:
			om.SelfLink, ok = fc.String()
			if !ok {
				return fmt.Errorf("cannot read ObjectMeta name")
			}
		case 5:
			om.UID, ok = fc.String()
			if !ok {
				return fmt.Errorf("cannot read ObjectMeta name")
			}
		case 6:
			om.ResourceVersion, ok = fc.String()
			if !ok {
				return fmt.Errorf("cannot read ObjectMeta name")
			}
		case 7:
			om.Generation, ok = fc.Int64()
			if !ok {
				return fmt.Errorf("cannot read ObjectMeta name")
			}
		case 8:
			data, ok := fc.MessageData()
			if !ok {
				return fmt.Errorf("cannot read ManagedFieldsEntry name")
			}
			var ts Timestamp
			if err := ts.UnmarshalProtobuf(data); err != nil {
				return fmt.Errorf("cannot unmarshal ManagedFieldsEntry: %w", err)
			}
			om.CreationTimestamp.Time = time.Unix(ts.Seconds, int64(ts.Nanos))
		case 9:
			data, ok := fc.MessageData()
			if !ok {
				return fmt.Errorf("cannot read ManagedFieldsEntry name")
			}
			var ts Timestamp
			if err := ts.UnmarshalProtobuf(data); err != nil {
				return fmt.Errorf("cannot unmarshal ManagedFieldsEntry: %w", err)
			}
			om.DeletionTimestamp.Time = time.Unix(ts.Seconds, int64(ts.Nanos))
		case 10:
			seconds, ok := fc.Int64()
			if !ok {
				return fmt.Errorf("cannot read ManagedFieldsEntry name")
			}
			om.DeletionGracePeriodSeconds = &seconds
		case 11, 12:
			maps := map[string]string{}
			switch fc.FieldNum {
			case 11:
				om.Labels = maps
			case 12:
				om.Annotations = maps
			}
			data, ok := fc.MessageData()
			if !ok {
				return fmt.Errorf("cannot read ManagedFieldsEntry name")
			}
			var mc easyproto.FieldContext
			var key, value string
			for i := 0; len(data) != 0; i++ {
				data, err = mc.NextField(data)
				if err != nil {
					return fmt.Errorf("cannot read ManagedFieldsEntry name")
				}
				if i%2 == 0 {
					key, ok = mc.String()
					if !ok {
						return fmt.Errorf("cannot read ManagedFieldsEntry name")
					}
				} else {
					value, ok = mc.String()
					if !ok {
						return fmt.Errorf("cannot read ManagedFieldsEntry name")
					}
					maps[key] = value
				}
			}
		case 13:
			data, ok := fc.MessageData()
			if !ok {
				return fmt.Errorf("cannot read ManagedFieldsEntry OwnerReferences data")
			}
			var mc easyproto.FieldContext
			for len(data) != 0 {
				data, err = mc.NextField(data)
				if err != nil {
					return fmt.Errorf("cannot read ManagedFieldsEntry name")
				}
				om.OwnerReferences = append(om.OwnerReferences, OwnerReference{})
				s := &om.OwnerReferences[len(om.OwnerReferences)-1]
				if err := s.UnmarshalProtobuf(data); err != nil {
					return fmt.Errorf("cannot unmarshal OwnerReference: %w", err)
				}
			}
		case 14:
			data, ok := fc.MessageData()
			if !ok {
				return fmt.Errorf("cannot read ManagedFieldsEntry Finalizers data")
			}
			var mc easyproto.FieldContext
			for len(data) != 0 {
				data, err = mc.NextField(data)
				if err != nil {
					return fmt.Errorf("cannot read ManagedFieldsEntry name")
				}
				finalizer, ok := mc.String()
				if !ok {
					return fmt.Errorf("cannot read ManagedFieldsEntry Finalizers data")
				}
				om.Finalizers = append(om.Finalizers, finalizer)
			}
		case 17:
			data, ok := fc.MessageData()
			if !ok {
				return fmt.Errorf("cannot read ManagedFieldsEntry ManagedFieldsEntry data")
			}
			var mc easyproto.FieldContext
			for len(data) != 0 {
				data, err = mc.NextField(data)
				if err != nil {
					return fmt.Errorf("cannot read ManagedFieldsEntry name")
				}
				om.ManagedFields = append(om.ManagedFields, ManagedFieldsEntry{})
				s := &om.ManagedFields[len(om.ManagedFields)-1]
				if err := s.UnmarshalProtobuf(data); err != nil {
					return fmt.Errorf("cannot unmarshal ManagedFields: %w", err)
				}
			}
		}
	}
	return
}
